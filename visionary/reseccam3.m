function P3=reseccam3(mot,imseq,index,ptsindex,option);
% P3=reseccam3(mot,imseq,index,ptsindex,option)
% Given two cameras and point correspondences across three views,
% the third camera is calculated linearly
% Input:
%   mot - MOTION (with at least two cameras)
%   imseq - cell of IMAGEDATA (with at least three views)
%   index - the indices of the three view (optional)
%   ptsindex - the indices of points to use (optional)
%   option:
%     'nocoordtrans' - No image coordinate transformation
% Output:
%   P3 - third camera matrix
% Default: 'index=[1 2 3]'.

if nargin<3,
  index=[1,2,3];
end
if nargin<4,
  ptsindex=1:size(imseq{1},1);
end

if nargin<5,
  option='';
end

if strcmp(option,'nocoordtrans'),
  T1=eye(3);
  T2=eye(3);
  T3=eye(3);
else
  T1=getnormtrans(imseq{index(1)});
  T2=getnormtrans(imseq{index(2)});
  T3=getnormtrans(imseq{index(3)});
end

pts1=sqrt(3)*psphere(T1*getpoints(imseq{index(1)},ptsindex));
pts2=sqrt(3)*psphere(T2*getpoints(imseq{index(2)},ptsindex));
pts3=sqrt(3)*psphere(T3*getpoints(imseq{index(3)},ptsindex));

goodpts=find(~isnan(pts1(1,:)+pts1(2,:)+pts1(3,:)));

P1=T1*getcameras(mot,index(1));P1=sqrt(2)*P1/norm(P1);
P2=T2*getcameras(mot,index(2));P2=sqrt(2)*P2/norm(P2);



p11=P1(1,1);p12=P1(1,2);p13=P1(1,3);p14=P1(1,4);
p21=P1(2,1);p22=P1(2,2);p23=P1(2,3);p24=P1(2,4);
p31=P1(3,1);p32=P1(3,2);p33=P1(3,3);p34=P1(3,4);
q11=P2(1,1);q12=P2(1,2);q13=P2(1,3);q14=P2(1,4);
q21=P2(2,1);q22=P2(2,2);q23=P2(2,3);q24=P2(2,4);
q31=P2(3,1);q32=P2(3,2);q33=P2(3,3);q34=P2(3,4);

N=zeros(9*length(goodpts),12);

for i=1:length(goodpts);

  x11=pts1(1,goodpts(i));x12=pts1(2,goodpts(i));x13=pts1(3,goodpts(i));
  x21=pts2(1,goodpts(i));x22=pts2(2,goodpts(i));x23=pts2(3,goodpts(i));
  x31=pts3(1,goodpts(i));x32=pts3(2,goodpts(i));x33=pts3(3,goodpts(i));

  j=(i-1)*9+1;


      t1 = p22*p33;
      t2 = x11*x22;
      t3 = t2*q14;
      t5 = p12*p23;
      t6 = x13*x22;
      t7 = t6*q14;
      t9 = p12*q23;
      t10 = x12*x21;
      t11 = t10*p34;
      t13 = q22*p33;
      t14 = t10*p14;
      t16 = p22*q23;
      t17 = x13*x21;
      t18 = t17*p14;
      t20 = q12*p33;
      t21 = x12*x22;
      t22 = t21*p14;
      t24 = p22*q13;
      t25 = t2*p34;
      t27 = p32*p23;
      t28 = x11*x21;
      t29 = t28*q24;
      t31 = p32*q13;
      t32 = t2*p24;
      t34 = q22*p23;
      t35 = t28*p34;
      t38 = p32*p13;
      t39 = t21*q14;
      t41 = p32*q23;
      t42 = t28*p24;
      t44 = t10*q24;
      t46 = q22*p13;
      t49 = t17*p24;
      t52 = t1*t3+t5*t7-t9*t11-t13*t14-t16*t18+t20*t22-t24*t25+t27*t29+t31*t32-t34*t35-t31*t22+t38*t39-t41*t42-t38*t44+t46*t11+t13*t42-t46*t49-t27*t3;
      t53 = q12*p23;
      t54 = t6*p14;
      t59 = p22*p13;
      t60 = t17*q24;
      t66 = p12*q13;
      t67 = t6*p24;
      t71 = p12*p33;
      t74 = q12*p13;
      t75 = t21*p34;
      t80 = -t53*t54+t24*t54+t9*t49+t16*t35+t59*t60-t5*t60-t1*t29-t20*t32-t59*t7-t66*t67+t34*t18+t41*t14-t71*t39+t71*t44-t74*t75+t66*t75+t53*t25+t74*t67;
      t81 = t52+t80;
      t82 = x32*t81;
      t83 = p11*q13;
      t85 = q11*p33;
      t87 = p11*p33;
      t89 = p31*p13;
      t91 = p11*q23;
      t93 = q11*p23;
      t95 = q21*p23;
      t99 = q21*p13;
      t101 = p31*p23;
      t103 = p31*q23;
      t106 = p31*q13;
      t108 = q21*p33;
      t111 = p21*q13;
      t113 = p21*p33;
      t115 = -t83*t67+t85*t22-t87*t39+t89*t39-t91*t11-t93*t54+t95*t18-t95*t35-t85*t32-t99*t49-t101*t3-t103*t42+t101*t29+t106*t32+t108*t42-t108*t14-t111*t25-t113*t29;
      t117 = p21*p13;
      t119 = p11*p23;
      t129 = p21*q23;
      t131 = q11*p13;
      t138 = t113*t3+t117*t60+t119*t7-t119*t60+t91*t49+t83*t75-t106*t22+t87*t44+t99*t11+t103*t14+t93*t25-t129*t18+t131*t67-t131*t75+t111*t54-t89*t44+t129*t35-t117*t7;
      t139 = t115+t138;
      t140 = x32*t139;
      t141 = p32*q21;
      t143 = p12*p21;
      t146 = q12*p31;
      t148 = q12*p21;
      t150 = p22*p31;
      t152 = p22*p11;
      t155 = q22*p21;
      t157 = p12*p31;
      t159 = q12*p11;
      t162 = q22*p11;
      t164 = p32*q11;
      t168 = p32*p21;
      t170 = p32*p11;
      t172 = -t141*t42+t143*t7+t141*t14+t146*t22-t148*t54-t150*t29-t152*t7-t146*t32-t155*t35+t157*t44+t159*t67+t150*t3-t162*t49-t164*t22+t162*t11-t159*t75+t168*t29-t170*t44;
      t173 = p12*q21;
      t177 = q22*p31;
      t182 = p12*q11;
      t186 = p22*q11;
      t189 = p22*q21;
      t196 = -t173*t11+t173*t49+t148*t25+t177*t42-t177*t14-t168*t3-t157*t39-t182*t67+t182*t75-t143*t60+t186*t54+t155*t18+t189*t35+t170*t39-t186*t25+t152*t60-t189*t18+t164*t32;
      t197 = t172+t196;
      t198 = x32*t197;
      t199 = t21*p11;
      t201 = t28*q21;
      t203 = x11*p31;
      t204 = t203*x22;
      t206 = x12*p31;
      t207 = t206*x22;
      t209 = t10*q21;
      t212 = x11*q11*x22;
      t214 = t17*p11;
      t217 = x11*p21;
      t218 = t217*x22;
      t220 = t6*p11;
      t223 = x12*q11*x22;
      t225 = x13*p21;
      t226 = t225*x21;
      t228 = t10*p11;
      t231 = x13*q11*x22;
      t233 = t217*x21;
      t235 = t206*x21;
      t238 = t203*x21;
      t240 = t20*t199+t27*t201+t53*t204-t74*t207+t71*t209+t1*t212-t16*t214-t31*t199-t20*t218+t24*t220-t71*t223+t9*t226-t13*t228+t5*t231+t13*t233-t9*t235+t34*t214-t34*t238;
      t241 = t225*x22;
      t256 = t17*q21;
      t261 = t74*t241-t66*t241+t16*t238-t38*t209-t53*t220+t31*t218+t41*t228-t41*t233-t46*t226+t66*t207-t24*t204-t1*t201+t46*t235+t38*t223-t5*t256-t59*t231-t27*t212+t59*t256;
      t262 = t240+t261;
      t263 = x32*t262;
      t264 = x31*t81;
      t265 = x31*t139;
      t266 = x31*t197;
      t267 = x31*t262;
      t268 = x33*t81;
      t269 = x33*t139;
      t270 = x33*t197;
      t271 = x33*t262;
      t272 = t10*q34;
      t274 = x12*x23;
      t275 = t274*p34;
      t277 = q32*p33;
      t279 = t28*q34;
      t281 = p32*q33;
      t283 = p12*q33;
      t285 = x13*x23;
      t286 = t285*p14;
      t288 = q32*p23;
      t291 = x11*x23;
      t292 = t291*p34;
      t294 = t291*p24;
      t296 = t274*p14;
      t298 = p22*q33;
      t300 = q32*p13;
      t304 = t291*q14;
      t307 = t38*t272+t74*t275-t277*t42+t1*t279-t281*t14+t283*t11-t24*t286+t288*t35-t288*t18-t53*t292+t20*t294+t31*t296+t298*t18+t300*t49+t53*t286-t31*t294+t27*t304+t277*t14;
      t308 = t17*q34;
      t311 = t274*q14;
      t316 = t285*q14;
      t318 = t285*p24;
      t330 = t5*t308-t59*t308+t71*t311-t1*t304-t298*t35-t66*t275+t59*t316+t66*t318-t27*t279+t24*t292-t71*t272-t283*t49-t5*t316-t20*t296-t300*t11+t281*t42-t38*t311-t74*t318;
      t331 = t307+t330;
      t332 = x32*t331;
      t333 = p31*q33;
      t339 = q31*p23;
      t341 = q31*p33;
      t343 = p11*q33;
      t355 = -t333*t14+t83*t318-t101*t279-t83*t275+t93*t286-t339*t18+t341*t14+t343*t11+t119*t308-t343*t49-t87*t272+t106*t296+t333*t42-t89*t311+t101*t304-t111*t286+t87*t311-t117*t308;
      t359 = p21*q33;
      t367 = q31*p13;
      t376 = t117*t316+t113*t279+t111*t292-t359*t35+t359*t18+t89*t272+t131*t275-t119*t316-t85*t296-t341*t42+t367*t49-t367*t11-t113*t304-t131*t318-t106*t294+t85*t294+t339*t35-t93*t292;
      t377 = t355+t376;
      t378 = x32*t377;
      t380 = p32*q31;
      t384 = q32*p21;
      t387 = q32*p31;
      t398 = p22*q31;
      t401 = t186*t292-t380*t14-t159*t318+t159*t275-t384*t18+t384*t35+t387*t14+t143*t308-t182*t275+t150*t279-t150*t304-t164*t294+t380*t42+t164*t296-t146*t296+t170*t272-t398*t35+t148*t286;
      t402 = q32*p11;
      t413 = p12*q31;
      t422 = t402*t49-t402*t11+t168*t304+t146*t294-t168*t279-t170*t311-t152*t308-t387*t42-t157*t272+t182*t318-t413*t49+t413*t11-t143*t316+t157*t311-t148*t292-t186*t286+t152*t316+t398*t18;
      t423 = t401+t422;
      t424 = x32*t423;
      t427 = t291*p21;
      t430 = t274*p11;
      t432 = t291*q11;
      t434 = t10*q31;
      t436 = t285*p21;
      t438 = t274*q11;
      t442 = t274*p31;
      t444 = t291*p31;
      t446 = t285*q11;
      t449 = t285*p11;
      t453 = -t300*t226-t288*t238+t31*t427+t288*t214-t31*t430+t1*t432-t38*t434-t66*t436-t71*t438+t283*t226-t298*t214+t66*t442-t24*t444-t59*t446+t298*t238+t24*t449+t277*t233-t277*t228;
      t454 = t17*q31;
      t460 = t28*q31;
      t474 = -t5*t454-t283*t235+t71*t434+t5*t446+t281*t228-t1*t460+t20*t430-t53*t449+t27*t460+t53*t444+t74*t436-t74*t442-t20*t427-t27*t432-t281*t233+t38*t438+t300*t235+t59*t454;
      t475 = t453+t474;
      t476 = x32*t475;
      t477 = x31*t331;
      t478 = x31*t377;
      t479 = x31*t423;
      t480 = x31*t475;
      t481 = x33*t331;
      t482 = x33*t377;
      t483 = x33*t423;
      t484 = x33*t475;
      t486 = t291*q24;
      t488 = t274*q24;
      t491 = t2*q34;
      t493 = t6*q34;
      t495 = t285*q24;
      t501 = t21*q34;
      t509 = -t300*t75-t1*t486+t71*t488+t9*t318+t1*t491-t59*t493+t59*t495+t298*t54-t16*t286-t5*t495+t283*t75-t71*t501-t9*t275-t281*t22+t16*t292+t38*t501-t277*t32+t46*t275;
      t528 = -t34*t292-t288*t54-t41*t294+t281*t32-t38*t488+t277*t22+t300*t67+t41*t296+t5*t493-t46*t318-t283*t67+t34*t286-t27*t491+t27*t486-t13*t296+t13*t294+t288*t25-t298*t25;
      t529 = t509+t528;
      t530 = x32*t529;
      t549 = t343*t75-t339*t54-t113*t486+t117*t495-t89*t488-t103*t294-t333*t22+t339*t25-t129*t286+t113*t491+t359*t54+t95*t286-t95*t292-t108*t296+t99*t275+t129*t292-t341*t32+t101*t486;
      t568 = -t117*t493-t99*t318-t101*t491-t359*t25+t108*t294-t87*t501+t89*t501-t367*t75+t103*t296-t91*t275-t343*t67+t119*t493+t367*t67-t119*t495+t87*t488+t91*t318+t341*t22+t333*t32;
      t569 = t549+t568;
      t570 = x32*t569;
      t589 = t402*t67-t380*t22-t170*t488-t384*t54+t413*t75+t157*t488+t384*t25-t141*t294+t170*t501-t402*t75-t152*t493-t398*t25+t398*t54-t150*t486+t150*t491-t168*t491+t155*t286+t177*t294;
      t608 = -t162*t318+t162*t275-t189*t286+t189*t292+t168*t486+t141*t296-t155*t292-t387*t32+t387*t22-t177*t296-t157*t501+t143*t493-t143*t495-t173*t275-t413*t67+t152*t495+t380*t32+t173*t318;
      t609 = t589+t608;
      t610 = x32*t609;
      t611 = t285*q21;
      t619 = t6*q31;
      t623 = t274*q21;
      t626 = t21*q31;
      t630 = t2*q31;
      t634 = t5*t611+t46*t436-t277*t199+t13*t430+t300*t207+t34*t444-t34*t449-t5*t619-t9*t436+t288*t220-t71*t623-t13*t427+t71*t626+t59*t619+t298*t204-t1*t630-t300*t241+t16*t449;
      t637 = t291*q21;
      t654 = -t46*t442+t9*t442-t27*t637-t59*t611-t16*t444+t1*t637-t298*t220-t281*t218-t38*t626-t288*t204+t41*t427+t38*t623+t281*t199-t41*t430+t283*t241-t283*t207+t277*t218+t27*t630;
      t655 = t634+t654;
      t656 = x32*t655;
      t657 = x31*t529;
      t658 = x31*t569;
      t659 = x31*t609;
      t660 = x31*t655;
      t661 = x33*t529;
      t662 = x33*t569;
      t663 = x33*t609;
      t664 = x33*t655;
      N(j,1) = t82;
      N(j,2) = -t140;
      N(j,3) = -t198;
      N(j,4) = -t263;
      N(j,5) = -t264;
      N(j,6) = t265;
      N(j,7) = t266;
      N(j,8) = t267;
      N(j+1,1) = t268;
      N(j+1,2) = -t269;
      N(j+1,3) = -t270;
      N(j+1,4) = -t271;
      N(j+1,9) = -t264;
      N(j+1,10) = t265;
      N(j+1,11) = t266;
      N(j+1,12) = t267;
      N(j+2,5) = t268;
      N(j+2,6) = -t269;
      N(j+2,7) = -t270;
      N(j+2,8) = -t271;
      N(j+2,9) = -t82;
      N(j+2,10) = t140;
      N(j+2,11) = t198;
      N(j+2,12) = t263;
      N(j+3,1) = -t332;
      N(j+3,2) = t378;
      N(j+3,3) = t424;
      N(j+3,4) = -t476;
      N(j+3,5) = t477;
      N(j+3,6) = -t478;
      N(j+3,7) = -t479;
      N(j+3,8) = t480;
      N(j+4,1) = -t481;
      N(j+4,2) = t482;
      N(j+4,3) = t483;
      N(j+4,4) = -t484;
      N(j+4,9) = t477;
      N(j+4,10) = -t478;
      N(j+4,11) = -t479;
      N(j+4,12) = t480;
      N(j+5,5) = -t481;
      N(j+5,6) = t482;
      N(j+5,7) = t483;
      N(j+5,8) = -t484;
      N(j+5,9) = t332;
      N(j+5,10) = -t378;
      N(j+5,11) = -t424;
      N(j+5,12) = t476;
      N(j+6,1) = -t530;
      N(j+6,2) = t570;
      N(j+6,3) = t610;
      N(j+6,4) = -t656;
      N(j+6,5) = t657;
      N(j+6,6) = -t658;
      N(j+6,7) = -t659;
      N(j+6,8) = t660;
      N(j+7,1) = -t661;
      N(j+7,2) = t662;
      N(j+7,3) = t663;
      N(j+7,4) = -t664;
      N(j+7,9) = t657;
      N(j+7,10) = -t658;
      N(j+7,11) = -t659;
      N(j+7,12) = t660;
      N(j+8,5) = -t661;
      N(j+8,6) = t662;
      N(j+8,7) = t663;
      N(j+8,8) = -t664;
      N(j+8,9) = t530;
      N(j+8,10) = -t570;
      N(j+8,11) = -t610;
      N(j+8,12) = t656;

end;

[U,D,V]=svd(N);

P3=inv(T3)*reshape(V(:,12),4,3)';P3=P3/norm(P3);
