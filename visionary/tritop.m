function m=tritop(T)
% m=tritop(T)
% Determines three possible camera matrices from the trifocal tensor T
% Input: T=trifocal tensor
% Output: [P1,P2,P3]=two camera matrices normalised such that
%          P1=[I 0] P2(1,:)=[0 0 0 1]
%         The 3 cameras are returned as MOTION m 

F12=tritobi(T);
[E12,E21]=bitoone(F12);
E2=E12./E12(1);

F13=tritobi1(T,1,3);
[E13,E31]=bitoone(F13);
E3=E13./E13(1);

P1=[1 0 0 0;0 1 0 0;0 0 1 0];
P2=[...
0 0 0 1;...
F12(1,3) F12(2,3) F12(3,3) E2(2);...
-F12(1,2) -F12(2,2) -F12(3,2) E2(3)];

P3=[...
T(1,1,1) T(2,1,1) T(3,1,1) E3(1);...
T(1,1,2) T(2,1,2) T(3,1,2) E3(2);...
T(1,1,3) T(2,1,3) T(3,1,3) E3(3)];

M=[...
T(1,2,1) P2(2,1)*P3(1,4) -P2(2,4)*P3(1,1);... 
T(1,2,2) P2(2,1)*P3(2,4) -P2(2,4)*P3(2,1);... 
T(1,2,3) P2(2,1)*P3(3,4) -P2(2,4)*P3(3,1);...
T(1,3,1) P2(3,1)*P3(1,4) -P2(3,4)*P3(1,1);...
T(1,3,2) P2(3,1)*P3(2,4) -P2(3,4)*P3(2,1);...
T(1,3,3) P2(3,1)*P3(3,4) -P2(3,4)*P3(3,1);...
T(2,2,1) P2(2,2)*P3(1,4) -P2(2,4)*P3(1,2);...
T(2,2,2) P2(2,2)*P3(2,4) -P2(2,4)*P3(2,2);...
T(2,2,3) P2(2,2)*P3(3,4) -P2(2,4)*P3(3,2);...
T(2,3,1) P2(3,2)*P3(1,4) -P2(3,4)*P3(1,2);...
T(2,3,2) P2(3,2)*P3(2,4) -P2(3,4)*P3(2,2);...
T(2,3,3) P2(3,2)*P3(3,4) -P2(3,4)*P3(3,2);...
T(3,2,1) P2(2,3)*P3(1,4) -P2(2,4)*P3(1,3);...
T(3,2,2) P2(2,3)*P3(2,4) -P2(2,4)*P3(2,3);...
T(3,2,3) P2(2,3)*P3(3,4) -P2(2,4)*P3(3,3);...
T(3,3,1) P2(3,3)*P3(1,4) -P2(3,4)*P3(1,3);...
T(3,3,2) P2(3,3)*P3(2,4) -P2(3,4)*P3(2,3);...
T(3,3,3) P2(3,3)*P3(3,4) -P2(3,4)*P3(3,3)
];

[U,S,V]=svd(M);
t=V(:,3);

s=t(3)/t(2);
E3=E3./s;

P3=[...
T(1,1,1) T(2,1,1) T(3,1,1) E3(1);...
T(1,1,2) T(2,1,2) T(3,1,2) E3(2);...
T(1,1,3) T(2,1,3) T(3,1,3) E3(3)];


m=motion({P1,P2,P3});



